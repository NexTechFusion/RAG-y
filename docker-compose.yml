version: '3.8'

services:
  # Main application
  api:
    build: .
    container_name: ai-chat-api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_chat_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-change-this-super-secret-jwt-key-in-production-32-chars-minimum}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-refresh-secret-in-production-32-chars-minimum}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-chat-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ai-chat-postgres
    environment:
      POSTGRES_DB: ai_chat_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_chat_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-chat-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Database Migration Service (runs once)
  migrate:
    build: .
    container_name: ai-chat-migrate
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_chat_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
    depends_on:
      postgres:
        condition: service_healthy
    command: ["bun", "run", "migrate"]
    restart: "no"
    networks:
      - ai-chat-network

  # Database Seeding Service (runs once)
  seed:
    build: .
    container_name: ai-chat-seed
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_chat_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: ["bun", "run", "seed"]
    restart: "no"
    networks:
      - ai-chat-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

# Network for service communication
networks:
  ai-chat-network:
    driver: bridge 